component emcochanger                   "This component controls the EMCO Lathe Auto Tool Changer. M6 calls this";

pin in bit toolchange                   "Receives signal from M6 that tool change required";
pin in s32 toolnumber                   "Receives Tx data from M6 (tool number requested) Only allows 1-8";
pin in s32 currenttoolnumber            "Receives old tool number";
pin out bit toolchanged = false         "Sends signal when tool change finished";

pin in bit opto1 = false                "State of opto sensor 1";
pin in bit opto2 = false                "State of opto sensor 2";
pin in bit opto3 = false                "State of opto sensor 3";
pin in bit opto4 = false                "State of opto sensor 4";

pin out bit forward = false;
pin out bit backward = false;

pin out float pwm = 0;

pin out s32 position = 0	            "Initialised as a pin for debugging so we can check where it thinks it is";

param rw float times = 500              "Number of polls of progress_levels 1 & 3 before beginning next move - gives delay for relays";
param rw float timesback = 1500;

// Internal and debugging stuff
pin out s32 progress_level = 0;         // tracks the progress of the toolchange, just here so it can be read easily
param rw s32 tnumber = 0;               // Internal toolnumber to allow overrun of quadrant by 1 then reverse back onto it

variable float sleeptime = 500;           // our own timer to set delay between progress levels 1 and 2
variable bool skippy = false;

option singleton yes;                   // makes no sense to have more than one of these components running - only one ATC
function _;
author "Daniel Hahn (mydani@gmx.de)";
license "GPL";
;;


FUNCTION(_)
{
    switch (progress_level)
        {
        case 0:  // idle waiting for toolchange request axis does not remember the current tool number, so prompt for it once homed    

			if(toolchange && !toolchanged)  // prevent cycling after change done 
			{
				if(
					(
						(toolnumber != currenttoolnumber) && 
						(toolnumber > 0) && 
						(toolnumber < 9) 		// if a valid number
					) 
					||
					(
						(toolnumber == 99)
					)
				)
				{
					tnumber = toolnumber;     

					sleeptime = 0;
					progress_level = 1;
					pwm = 100;
					backward = false;
					forward = true;
					skippy = false;
					break;
				}
				else
				{
					// if tool requested is out of range set the toolchanged flag and exit should only get this if tool table has more tools than ATC can have otherwise emc will error the M6 command
					progress_level = 5;
				}
			}

			if(!toolchange && toolchanged)
				toolchanged = false; // reset once toolchange flag reset by system

			break;
			
        case 1: // programmed delay to allow relays time to change over

			// This switch ensures we are not stuck at first tool change with the same tool selected as in position but turret already moved out of lock 
 			// --> this leads to tool + 1 in changer mismatch!!
			
			skippy = false;
			switch(tnumber)
			{
				case 1:
					if(opto1 && !opto2 && opto3 && opto4)
					skippy = true;
				break;
				case 2:
					if(!opto1 && !opto2 && opto3 && opto4) 
					skippy = true;
				break;
				case 3:
					if(!opto1 && opto2 && opto3 && opto4) 
					skippy = true;
				break;
				case 4:
					if(!opto1 && opto2 && opto3 && !opto4) 
					skippy = true;
				break;
				case 5:
					if(opto1 && opto2 && opto3 && !opto4) 
					skippy = true;
				break;
				case 6:
					if(opto1 && opto2 && !opto3 && !opto4) 
					skippy = true;
				break;
				case 7:
         				if(opto1 && opto2 && !opto3 && opto4)
					skippy = true;
				break;
				case 8:
					if(opto1 && !opto2 && !opto3 && opto4) 
					skippy = true;
				break;
				case 99:
					if(opto1 && !opto2 && opto3 && opto4) 
					skippy = true;
				break;

			}
			if(skippy == true)
				break;

			if(sleeptime < times)  
			{
				sleeptime++;
				break;
			}
            progress_level = 2;

            break;
			
        case 2: // Forward move - read the truth table to determine position
			if(opto1 && !opto2 && opto3 && opto4) 
				position = 1;
			else if(!opto1 && !opto2 && opto3 && opto4) 
				position =  2;
			else if(!opto1 && opto2 && opto3 && opto4) 
				position =  3;
			else if(!opto1 && opto2 && opto3 && !opto4) 
				position =  4;
			else if(opto1 && opto2 && opto3 && !opto4) 
				position =  5;
			else if(opto1 && opto2 && !opto3 && !opto4) 
				position =  6;
			else if(opto1 && opto2 && !opto3 && opto4) 
				position =  7;
			else if(opto1 && !opto2 && !opto3 && opto4) 
				position =  8;
			else
				position = 0;

            		if(!position)  // if returning 0 something is wrong
			{
				rtapi_print_msg(RTAPI_MSG_ERR, "Error - opto inputs do not match truth table");
				progress_level = 12; // doesn't exist so will go to default, output msg and then sit in level 10
				break;
			}
                    
            		if(tnumber != 99)
            		{
				if(position != tnumber)  // wait for next tool + 1 to come around
					break;
			}
			else
			{
				if(position != 1)
					break;
			}
			

			// Found, trigger backward for locking
			
			forward = true;
			if(tnumber == 99)
				pwm = 0;
			sleeptime = 0;
			progress_level = 3;

            break;

        case 3: // programmed delay to allow relays time to change over
			if(sleeptime < times)  
			{
				sleeptime++;
				break;
			}
			forward = false;
			backward = true;
			sleeptime = 0;
			progress_level = 4; // after first toolchange or update of tool number this is default, reverse with 12v applied to lock

			break; 
			
        case 4: // programmed delay to allow relays time to change over
			if(sleeptime < timesback)  
			{
				sleeptime++;
				break;
			}
			progress_level = 5; // after first toolchange or update of tool number this is default, reverse with 12v applied to lock
			if(tnumber != 99)
			{
				pwm = 30;
			}
			else
				pwm = 0;
		
			break; 
			
        case 5: // clean up ready for next toolchange
			progress_level = 0;
			toolchanged = true;   // signal finished
			break;

        default:    
			progress_level = 10;
			rtapi_print_msg(RTAPI_MSG_ERR, "Error state in emcochanger - now disabled - unload emcochanger");            
			break;
        }
 
}
